
REST API (Notes)

STATING POINT NULL (NO CONSTRAINS)
WHAT WAS THE PROBLEM? 

WE STARTED TO SEE MUCH MORE COMPLEX SYSTEMS, where scalability and complexity, RELIABILITY BECAME A PROBLEM

in managing communication between clients and server was getting harder
One solution to this is the clear distinction of client and server: 
by separating data interface and data storage we are improving protability (move to other platforms) and scalability
separation allows the components to evolve independently.
ANOTHER CONSTRAIN IN REST 

STATELESS SERVER
each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server
Reliability is improved because it eases the task of recovering from partial failures [133]. 
Scalability is improved because not having to store state between requests allows the server 
component to quickly free resources, and further simplifies implementation because the server doesn't have to manage resource usage across requests.

ISSUE
The disadvantage is that it may decrease network performance by increasing the repetitive data (per-interaction overhead) sent in a series of requests, 
since that data cannot be left on the server in a shared context. 
In addition, placing the application state on the client-side reduces the server's control 
over consistent application behavior

Cache

TO improve efficiency data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, 
then a client cache is given the right to reuse that response data for later, equivalent requests.
however, is that a cache can decrease reliability if stale data within the cache differs significantly from the data that would have been obtained had the request been sent directly to the server.
Uniform Interface
decouple of components 
Implementations are decoupled from the services they provide, which encourages independent evolvability. 
The trade-off, though, is that a uniform interface degrades efficiency, since information is transferred in a standardized form rather than one which is 
specific to an application's needs.

Layered System
decouple
the layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot "see" 
beyond the immediate layer with which they are interacting. 
By restricting knowledge of the system to a single layer, we place a bound on the overall system complexity and promote substrate independence.
 primary disadvantage of layered systems is that they add overhead and latency to the processing of data

CODE ON DEMAND
 REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. This simplifies clients by reducing the number of features 
required to be pre-implemented. Allowing features to be downloaded after deployment improves system extensibility. However, it also reduces visibility, and thus is only an optional constraint within REST.


How is data managed:
three options: 
 render the data where it is located and send a fixed-format 
 encapsulate the data with a rendering engine and send both to the recipient
 send the raw data to the recipient along with metadata that describes the data type
REST provides a hybrid of all three options by focusing on a shared understanding of data types with metadata, 
but limiting the scope of what is revealed to a standardized interface. (0 describes the data thatis being sent according to the client side too)

SUMMARY
This chapter introduced the Representational State Transfer (REST) architectural style for distributed hypermedia systems. 
REST provides a set of architectural constraints that, when applied as a whole, emphasizes scalability 
generalitys, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, 
and encapsulate legacy systems. 


WHY IS REST MORE POPULAR
First, REST is easy to understand: it uses HTTP and basic CRUD operations (HIGHER SCALABILITY)

REST also makes efficient use of bandwidth, as it’s much less verbose than SOAP. Unlike SOAP, REST is designed to be stateless, and REST reads can be cached for better performance and scalability.

REST supports many data formats, but the predominant use of JSON means better support for browser clients. JSON connection to JavaScript and the browser

Disadvantages or Challenges in REST:
IT may need to hit multiple endpoints to get an answer
MUTIPLE END POINTS, DATA STRUCTURES ARE FIXED, COMPLEXITY IN MANAGING RELATIONS
Lack of state: most web applications require stateful mechanisms. Suppose you purchase a website which has a mechanism to have a shopping cart. It is required to know the number of items in the shopping cart before the actual purchase is made. This burden of maintaining the state lies on the client, which makes the client application heavy and difficult to maintain.
Last of security: REST doest impose security such as SOAP. That is the reason REST is appropriate for public URLs, but it is not good for confidential data passage between client and server. 

current solutions GRAPHQL

YOU’d simply send a single query to the GraphQL server that includes the concrete data requirements. 
The server then responds with a JSON object where these requirements are fulfilled
No more Over- and Underfetching  This happens because the only way for a client to download data is by hitting endpoints that return fixed data structures
Overfetching: Downloading superfluous data
Underfetching and the n+1 problem
